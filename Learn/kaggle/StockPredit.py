#!/usr/bin/python
# -*- coding: UTF-8 -*-
import os
import datetime
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from itertools import chain

from numpy.core.umath import NAN

marketParameters = {'W0': np.array([[[-4.16757216e-01, -5.62652762e-02, -2.13619706e+00,
                                      1.64027108e+00, -1.79343532e+00, -8.41746292e-01,
                                      5.02880147e-01, -1.24528821e+00, -1.05794866e+00,
                                      -9.09007099e-01]],

                                    [[5.51454436e-01, 2.29220920e+00, 4.15368805e-02,
                                      -1.11792509e+00, 5.39058834e-01, -5.96158600e-01,
                                      -1.91319232e-02, 1.17500115e+00, -7.47871549e-01,
                                      9.02572634e-03]],

                                    [[-8.78107479e-01, -1.56435381e-01, 2.56569461e-01,
                                      -9.88779080e-01, -3.38822491e-01, -2.36183268e-01,
                                      -6.37655255e-01, -1.18761183e+00, -1.42122120e+00,
                                      -1.53494837e-01]],

                                    [[-2.69056339e-01, 2.23136784e+00, -2.43476854e+00,
                                      1.12726521e-01, 3.70444453e-01, 1.35963467e+00,
                                      5.01857033e-01, -8.44213644e-01, 1.09653340e-05,
                                      5.42353013e-01]],

                                    [[-3.13507811e-01, 7.71009190e-01, -1.86809215e+00,
                                      1.73118378e+00, 1.46767658e+00, -3.35677232e-01,
                                      6.11339751e-01, 4.79704062e-02, -8.29139087e-01,
                                      8.77102149e-02]],

                                    [[1.00036465e+00, -3.81093873e-01, -3.75664232e-01,
                                      -7.44714584e-02, 4.33495846e-01, 1.27837636e+00,
                                      -6.34676710e-01, 5.08396528e-01, 2.16119044e-01,
                                      -1.85861355e+00]],

                                    [[-4.19317117e-01, -1.32325405e-01, -3.95678719e-02,
                                      3.26004793e-01, -2.04032100e+00, 4.62552933e-02,
                                      -6.77674535e-01, -1.43943827e+00, 5.24300221e-01,
                                      7.35279734e-01]],

                                    [[-6.53250197e-01, 8.42459015e-01, -3.81516052e-01,
                                      6.64900378e-02, -1.09873768e+00, 1.58448787e+00,
                                      -2.65944949e+00, -9.14518437e-02, 6.95120583e-01,
                                      -2.03346583e+00]],

                                    [[-1.89470475e-01, -7.72219274e-02, 8.24705016e-01,
                                      1.24821189e+00, -4.03893108e-01, -1.38452119e+00,
                                      1.36723625e+00, 1.21788482e+00, -4.62005880e-01,
                                      3.50887034e-01]],

                                    [[3.81867237e-01, 5.66276868e-01, 2.04206066e-01,
                                      1.40669698e+00, -1.73795920e+00, 1.04082620e+00,
                                      3.80471756e-01, -2.17134341e-01, 1.17352772e+00,
                                      -2.34360186e+00]],

                                    [[1.16152281e+00, 3.86080287e-01, -1.13313778e+00,
                                      4.33092971e-01, -3.04086166e-01, 2.58529737e+00,
                                      1.83533113e+00, 4.40689721e-01, -7.19255303e-01,
                                      -5.83413423e-01]],

                                    [[-3.25048979e-01, -5.60227928e-01, -9.02246712e-01,
                                      -5.90971262e-01, -2.76177647e-01, -5.16882733e-01,
                                      -6.98589855e-01, -9.28891538e-01, 2.55044644e+00,
                                      -1.47317229e+00]],

                                    [[-1.02141380e+00, 4.32397771e-01, -3.23582819e-01,
                                      4.23825248e-01, 7.99180569e-01, 1.26261553e+00,
                                      7.51963051e-01, -9.93761196e-01, 1.10914513e+00,
                                      -1.76491690e+00]],

                                    [[-1.14423354e-01, -4.98177186e-01, -1.06079354e+00,
                                      5.91666541e-01, -1.83256330e-01, 1.01985171e+00,
                                      -1.48246322e+00, 8.46312493e-01, 4.97937318e-01,
                                      1.26502837e-01]],

                                    [[-1.41881020e+00, -2.51778631e-01, -1.54667658e+00,
                                      -2.08265348e+00, 3.27974324e+00, 9.70860962e-01,
                                      1.79259163e+00, -4.29014400e-01, 6.96194865e-01,
                                      6.97415654e-01]],

                                    [[6.01515431e-01, 3.65913966e-03, -2.28246014e-01,
                                      -2.06961240e+00, 6.10143989e-01, 4.23496012e-01,
                                      1.11788746e+00, -2.74241678e-01, 1.74181240e+00,
                                      -4.47501173e-01]],

                                    [[-1.25542748e+00, 9.38162269e-01, -4.68346061e-01,
                                      -1.25472035e+00, 1.24823451e-01, 7.56501907e-01,
                                      2.41439652e-01, 4.97425947e-01, 4.10868900e+00,
                                      8.21120820e-01]],

                                    [[1.53176193e+00, -1.98584062e+00, 3.65050767e-01,
                                      7.74082732e-01, -3.64478415e-01, -8.75976929e-01,
                                      3.96520051e-01, -3.14616724e-01, -5.93752712e-01,
                                      1.14950216e+00]],

                                    [[1.33556559e+00, 3.02627143e-01, -4.54225480e-01,
                                      5.14370024e-01, 8.29457599e-01, 6.30620472e-01,
                                      -1.45336384e+00, -3.38017796e-01, 3.59133554e-01,
                                      6.22219774e-01]],

                                    [[9.60782225e-01, 7.58371766e-01, -1.13431869e+00,
                                      -7.07421120e-01, -1.22142914e+00, 1.80447661e+00,
                                      1.80409114e-01, 5.53163937e-01, 1.03303401e+00,
                                      -3.29002400e-01]],

                                    [[-1.15100067e+00, -4.26515178e-01, -1.48153175e-01,
                                      1.50143788e+00, 8.69599451e-01, -1.08708671e+00,
                                      6.64219639e-01, 7.34884544e-01, -1.06136058e+00,
                                      -1.08514796e-01]],

                                    [[-1.85040411e+00, 3.30490159e-01, -3.15692341e-01,
                                      -1.35000109e+00, -6.98169786e-01, 2.39951776e-01,
                                      -5.52949660e-01, 2.99527405e-01, 5.52664988e-01,
                                      -8.40442516e-01]],

                                    [[-3.12269127e-01, 2.14468399e+00, 1.21103609e-01,
                                      -8.46827575e-01, 6.04637023e-02, -1.33858603e+00,
                                      1.13274556e+00, 3.70305666e-01, 1.08581082e+00,
                                      9.02181232e-01]],

                                    [[3.90296897e-01, 9.75511195e-01, 1.91573229e-01,
                                      -6.62208969e-01, -1.02351482e+00, -4.48174387e-01,
                                      -2.50545782e+00, 1.82599442e+00, -1.71406473e+00,
                                      -7.66392805e-02]],

                                    [[-1.31756726e+00, -2.02559668e+00, -8.22461468e-02,
                                      -3.04667588e-01, -1.59725548e-01, 5.48946039e-01,
                                      -6.18375848e-01, 3.78793919e-01, 5.13247962e-01,
                                      -3.34844555e-01]]]), 'b0': np.array([[1.32641235e-07],
                                                                           [9.49119643e-08],
                                                                           [1.27360818e-07],
                                                                           [2.45633851e-07],
                                                                           [2.27775352e-07],
                                                                           [-3.14813261e-07],
                                                                           [-5.34290118e-07],
                                                                           [-2.58707467e-07],
                                                                           [-1.82341391e-07],
                                                                           [2.12135008e-07],
                                                                           [4.46920552e-07],
                                                                           [7.33868325e-08],
                                                                           [1.94870567e-07],
                                                                           [-8.34231150e-07],
                                                                           [4.59083531e-07],
                                                                           [-1.54672668e-07],
                                                                           [-1.30831380e-07],
                                                                           [4.82076299e-07],
                                                                           [-1.49863092e-07],
                                                                           [1.07465639e-07],
                                                                           [7.18544274e-07],
                                                                           [-3.20720626e-07],
                                                                           [2.99503497e-07],
                                                                           [1.75623677e-07],
                                                                           [1.93417228e-07]]),
                    'W1': np.array([[-2.80683595e-03, 5.35707093e-03, 6.19672023e-04,
                                     1.53836300e-03, -2.37459546e-02, 5.84425758e-04,
                                     3.76132174e-03, -1.37478122e-03, 3.36950169e-03,
                                     1.90031816e-02, 8.43487083e-04, 6.61109813e-03,
                                     -8.53599222e-03, -8.52469956e-03, -4.82039758e-03,
                                     -1.02443121e-02, -1.92718013e-04, -9.29224459e-03,
                                     -1.76895258e-03, -1.44196050e-02, -1.64864780e-02,
                                     -6.76404887e-03, -1.07391810e-02, -6.49574523e-03,
                                     -6.08664406e-03],
                                    [-3.49917175e-03, 1.04333985e-02, 1.36606286e-02,
                                     7.25248402e-03, -3.65374803e-03, 1.49668864e-02,
                                     -1.52727592e-02, -2.02423749e-02, 2.67000209e-03,
                                     3.20662136e-05, -1.39192253e-03, 4.30308716e-04,
                                     -1.63829147e-02, -1.15857296e-02, 1.23591214e-02,
                                     1.03816012e-02, -7.09247727e-03, 1.93312835e-02,
                                     -1.07390025e-02, -5.64897537e-03, 2.86277819e-03,
                                     -1.19174444e-02, -4.82230151e-03, -1.80177276e-03,
                                     -3.94491895e-03],
                                    [8.70409389e-03, 5.96625488e-03, -1.09697736e-02,
                                     -6.79854288e-03, 1.86539876e-03, -6.74284430e-04,
                                     -7.91947782e-03, 4.24537360e-03, 8.21866097e-03,
                                     -6.35684280e-03, 7.89776173e-03, -1.63165093e-02,
                                     -1.61212940e-02, 5.00486023e-03, -8.35351554e-03,
                                     -1.00546278e-02, -2.74164878e-03, -6.78625740e-03,
                                     3.28750962e-03, -1.46083961e-02, -3.65341685e-03,
                                     3.15842494e-02, 1.07171516e-03, -1.90727708e-02,
                                     5.97543320e-03],
                                    [5.47063514e-03, 1.38182550e-02, 1.47287557e-03,
                                     -6.56002104e-03, 1.40344447e-02, 7.12324732e-03,
                                     -1.79722141e-02, 7.51639496e-03, -2.35650438e-03,
                                     1.11250663e-02, -3.78970108e-03, 7.94555023e-03,
                                     1.94575887e-03, 5.87786307e-03, -2.16144607e-04,
                                     -4.10164270e-03, 7.68915588e-04, 6.30794900e-03,
                                     4.18376251e-03, 1.61740950e-02, 4.21066176e-03,
                                     6.38694086e-03, 2.10425198e-02, 6.53709630e-04,
                                     5.38141072e-03],
                                    [-5.70398364e-03, 4.51046660e-04, 1.66472219e-02,
                                     3.29408509e-03, 1.47068135e-02, -1.05734280e-02,
                                     -1.40273457e-02, 3.05119181e-03, -1.37700834e-02,
                                     2.64771423e-02, 1.28650962e-02, -1.29274792e-02,
                                     -1.95198339e-03, -5.63400605e-03, 4.05031068e-03,
                                     -9.08780719e-04, 8.53904780e-03, 1.48845256e-02,
                                     -2.14473848e-03, -1.16819667e-02, 5.70928899e-03,
                                     -1.77358485e-03, 1.10425874e-02, -1.13599727e-03,
                                     8.29187938e-03],
                                    [3.34155626e-03, -1.90586296e-03, -4.50741968e-03,
                                     7.10029632e-03, 2.52274456e-02, 8.37615249e-03,
                                     -1.27603503e-03, 7.11081253e-03, 1.12018826e-03,
                                     -1.27825489e-02, 3.04024682e-03, 1.55770074e-02,
                                     -3.16424267e-03, -1.12490940e-02, 4.85868676e-03,
                                     1.83639813e-02, 9.50707841e-03, 1.01826522e-02,
                                     2.30211112e-02, 1.62440480e-02, 7.07214416e-03,
                                     -2.04863982e-03, 1.40854665e-03, -1.03725051e-03,
                                     8.50784252e-03],
                                    [-8.39076204e-03, 1.52635795e-02, 1.81245858e-03,
                                     -4.08568293e-03, 8.21846032e-03, -2.06777099e-02,
                                     -8.26225912e-03, -6.53701263e-03, 8.07409540e-03,
                                     -5.11872906e-03, 1.42853060e-02, -4.58019005e-03,
                                     4.99156343e-03, -6.97662175e-03, 1.14570714e-02,
                                     -2.80606225e-03, 4.44742867e-03, -4.66698727e-03,
                                     -1.08979465e-02, -2.43568483e-03, 1.10861464e-02,
                                     -1.01669030e-02, -1.57959791e-02, -2.81101254e-03,
                                     8.02317508e-03],
                                    [-1.03008278e-02, -5.97138015e-03, 2.58218694e-03,
                                     -4.90066615e-03, 2.30887519e-03, 1.16609056e-02,
                                     1.82419557e-04, -1.38272542e-03, 8.27047670e-03,
                                     -1.03122453e-03, -1.00759451e-02, -1.05993158e-02,
                                     -1.17012910e-02, 1.85984137e-02, -1.01306299e-03,
                                     5.29772673e-03, 5.50790819e-03, -8.49746169e-03,
                                     5.45698888e-03, -6.67852452e-03, -2.02733854e-02,
                                     -2.17844546e-03, -1.15087960e-02, -3.20815790e-03,
                                     4.03887389e-03],
                                    [2.30183063e-02, -5.24232987e-03, -1.37297144e-03,
                                     3.32278211e-03, 1.69067250e-03, -1.53444862e-03,
                                     -1.07274386e-02, -9.57109134e-03, -1.86243875e-03,
                                     -1.17406539e-02, -6.68979416e-03, -1.25531732e-02,
                                     1.10248766e-02, -1.49229103e-02, 1.88013465e-02,
                                     -5.98826544e-03, -1.11007685e-02, -1.15008641e-02,
                                     7.70202701e-03, 1.00868228e-02, -8.42036150e-03,
                                     3.32682355e-03, -1.95834780e-03, -2.25254364e-03,
                                     1.81314415e-03],
                                    [7.70474495e-03, -1.92319960e-02, -2.22658983e-02,
                                     2.04156579e-03, -7.98181573e-04, 6.84188858e-03,
                                     -1.70009110e-02, -9.87596890e-03, 1.54034373e-02,
                                     -1.30503320e-02, 3.61842466e-03, -7.80909458e-03,
                                     -4.03358758e-03, -1.38070067e-02, 1.18746122e-02,
                                     -1.89263131e-02, -1.18835125e-02, -9.06890030e-03,
                                     1.17181574e-02, 3.04884943e-03, 6.71388393e-03,
                                     -1.33983729e-04, 2.38421305e-03, 4.84787993e-03,
                                     1.54985946e-02]]), 'b1': np.array([[-3.24057058e-07],
                                                                        [8.30273508e-06],
                                                                        [-5.93293033e-06],
                                                                        [1.01435577e-06],
                                                                        [1.34269117e-05],
                                                                        [2.27440575e-06],
                                                                        [6.56876824e-06],
                                                                        [-2.17258912e-05],
                                                                        [1.51507192e-06],
                                                                        [9.90364066e-06]]),
                    'W2': np.array([[-0.00179216, -0.01571197, 0.01052186, -0.0037358, -0.01580724,
                                     -0.00661337, -0.01007525, 0.01923502, -0.00413843, -0.02081897]]),
                    'b2': np.array([[-0.00582645]])}

stockParameters = {'W1': np.array([[-4.94172605e-01, -4.90567694e-01, -5.11366987e-01,
                                    -4.73602318e-01, -5.07939382e-01, -4.98422500e-01,
                                    -4.84976212e-01, -5.02457907e-01, -5.00584548e-01,
                                    -4.99095102e-01, -6.78935444e-01, -5.37353254e-01,
                                    -1.77140047e-01, -2.28571857e+00],
                                   [-7.70591609e-01, -7.81943789e-01, -7.76173497e-01,
                                    -7.64232180e-01, -7.83460902e-01, -7.75891940e-01,
                                    -7.84763271e-01, -7.77546534e-01, -7.73416488e-01,
                                    -7.85869983e-01, 9.13930159e-02, 3.46875928e-01,
                                    -1.99941899e-01, 7.16653093e-01],
                                   [-2.11380756e-01, -1.98703536e-01, -1.99859154e-01,
                                    -1.74854916e-01, -2.21516260e-01, -1.96041319e-01,
                                    -1.93464139e-01, -1.83572245e-01, -1.92150012e-01,
                                    -2.05610721e-01, 2.18218192e-01, 1.62455583e+00,
                                    -2.14220179e-02, 3.32625682e+00],
                                   [-6.65622303e-01, -6.29629550e-01, -6.32264616e-01,
                                    -6.50298170e-01, -6.40827989e-01, -6.46461691e-01,
                                    -6.55232749e-01, -6.46064294e-01, -6.36937738e-01,
                                    -6.50752322e-01, -7.40297265e-02, -1.06749855e-01,
                                    4.91539730e-02, 5.13198731e-02],
                                   [-2.24835821e-01, -2.13405065e-01, -2.16327868e-01,
                                    -2.37075151e-01, -2.22682192e-01, -2.19812317e-01,
                                    -2.18884730e-01, -2.15228993e-01, -2.38892258e-01,
                                    -2.18026472e-01, -2.50005434e-01, -3.89044340e-01,
                                    -1.85753516e-01, -4.21484253e+00],
                                   [-6.39424089e-01, -6.24467024e-01, -6.36706751e-01,
                                    -6.32226696e-01, -6.43878976e-01, -6.17046716e-01,
                                    -6.59486081e-01, -6.33806113e-01, -6.25940391e-01,
                                    -6.53226252e-01, -2.49702275e-01, -2.89283444e-01,
                                    1.90375639e-01, -2.02149598e-01],
                                   [-6.56940138e-01, -6.66746402e-01, -6.39228861e-01,
                                    -6.40722359e-01, -6.57521268e-01, -6.49392330e-01,
                                    -6.49082553e-01, -6.47238461e-01, -6.50859135e-01,
                                    -6.38834252e-01, -6.76523922e-02, -5.85726316e-02,
                                    2.81323536e-02, 9.33791450e-02],
                                   [-6.31658479e-01, -6.66829825e-01, -6.31778579e-01,
                                    -6.39533013e-01, -6.54725126e-01, -6.39062868e-01,
                                    -6.46434658e-01, -6.17540845e-01, -6.25040466e-01,
                                    -6.38986895e-01, -1.18708962e-01, -1.34632808e-01,
                                    5.76616303e-02, -9.14244038e-03],
                                   [-6.54561043e-01, -6.51448305e-01, -6.48300377e-01,
                                    -6.50707421e-01, -6.52524482e-01, -6.54827501e-01,
                                    -6.20034200e-01, -6.60270315e-01, -6.55752730e-01,
                                    -6.41214625e-01, -5.37834805e-01, -4.93667727e-01,
                                    3.78872935e-01, -5.09253522e-01],
                                   [-6.49102064e-01, -6.66559323e-01, -6.45530280e-01,
                                    -6.74270890e-01, -6.57765926e-01, -6.61603455e-01,
                                    -6.67229703e-01, -6.50705048e-01, -6.58454279e-01,
                                    -6.46423166e-01, -7.62411913e-01, -5.99802922e-01,
                                    4.66079579e-01, -7.40519787e-01],
                                   [-1.55440814e-01, -1.43770449e-01, -1.56719454e-01,
                                    -1.62079228e-01, -1.08455254e-01, -1.31544095e-01,
                                    -1.23326780e-01, -1.45542841e-01, -1.34290728e-01,
                                    -1.34278545e-01, -1.66843058e-01, -3.62953101e-01,
                                    -9.57690120e-02, -4.79233346e+00],
                                   [-6.31138075e-01, -6.33004547e-01, -6.26060649e-01,
                                    -6.39981937e-01, -6.19821394e-01, -6.41714525e-01,
                                    -6.49793788e-01, -6.27857880e-01, -6.41922979e-01,
                                    -6.49786719e-01, -1.65115340e-01, -1.99857244e-01,
                                    1.23443428e-01, -1.02760209e-01],
                                   [-1.89308482e-01, -2.22184199e-01, -2.15077805e-01,
                                    -2.50253866e-01, -2.26744873e-01, -2.22654587e-01,
                                    -2.34040199e-01, -2.39155203e-01, -2.26430206e-01,
                                    -2.33541582e-01, -2.81130916e-01, -3.83085265e-01,
                                    -1.37887752e-01, -4.05353289e+00],
                                   [-1.51300062e-01, -1.41614076e-01, -1.38463199e-01,
                                    -1.40451564e-01, -1.61291427e-01, -1.50137961e-01,
                                    -1.43166450e-01, -1.40535579e-01, -1.37149964e-01,
                                    -1.39174080e-01, 5.11766603e-01, 2.65416914e+00,
                                    8.43024304e-02, 4.24691658e+00],
                                   [-2.67373600e-01, -2.63646055e-01, -2.58847407e-01,
                                    -2.72467722e-01, -2.80687727e-01, -2.73442922e-01,
                                    -2.70659170e-01, -2.54163329e-01, -2.60481716e-01,
                                    -2.80048603e-01, 6.34258322e-02, 8.27847896e-01,
                                    -2.75140852e-02, 2.12562610e+00],
                                   [-6.98860060e-01, -6.77051139e-01, -6.83512952e-01,
                                    -6.93856041e-01, -6.87337730e-01, -6.77956508e-01,
                                    -6.85885514e-01, -6.77360752e-01, -6.74829383e-01,
                                    -6.88760450e-01, 2.61447255e-02, 9.65416210e-02,
                                    -6.50572871e-02, 2.74381967e-01],
                                   [1.88302060e-02, 4.83969273e-03, 2.95530423e-02,
                                    2.19286300e-02, 2.90836456e-02, 2.72473755e-02,
                                    2.21285460e-02, 2.79806757e-02, 2.01413180e-02,
                                    1.16034914e-02, -1.24935048e+00, 8.29546040e-01,
                                    2.87830005e-01, 1.00424019e+02],
                                   [-7.93731841e-01, -7.77357562e-01, -7.89766839e-01,
                                    -7.96847102e-01, -7.77413620e-01, -7.79637832e-01,
                                    -7.78188408e-01, -7.71101701e-01, -7.82774921e-01,
                                    -7.72803222e-01, 1.08860614e-01, 3.64534217e-01,
                                    -1.99248995e-01, 7.79849272e-01],
                                   [-4.69241858e-01, -4.68223483e-01, -4.93558395e-01,
                                    -4.69229169e-01, -4.66048909e-01, -4.71169166e-01,
                                    -4.66455284e-01, -4.50770609e-01, -4.68960724e-01,
                                    -4.63161025e-01, -6.43219795e-01, -5.20410599e-01,
                                    -2.79216761e-01, -2.60060120e+00],
                                   [-3.30436898e-01, -3.39699193e-01, -3.32110855e-01,
                                    -3.44732321e-01, -3.46882889e-01, -3.37117504e-01,
                                    -3.41031558e-01, -3.36890198e-01, -3.36481834e-01,
                                    -3.33873511e-01, -3.34369295e-01, -4.12904860e-01,
                                    -3.23160517e-01, -3.53770980e+00],
                                   [1.20125289e-01, 8.98446598e-02, 8.49221315e-02,
                                    1.07835497e-01, 1.05133706e-01, 1.03762852e-01,
                                    1.05481426e-01, 8.87501686e-02, 9.35887792e-02,
                                    1.17496118e-01, 1.47650175e+00, -1.64448640e+00,
                                    2.66956426e-01, -2.70752112e+01],
                                   [-7.29079358e-01, -7.20441222e-01, -7.35315541e-01,
                                    -7.28244848e-01, -7.25096254e-01, -7.27319006e-01,
                                    -7.14657135e-01, -7.17437474e-01, -7.34358515e-01,
                                    -7.30180849e-01, 7.25732384e-02, 1.91318647e-01,
                                    -1.36266674e-01, 4.59505998e-01],
                                   [-1.77242977e-01, -1.91753015e-01, -1.77551232e-01,
                                    -2.01658566e-01, -2.01546821e-01, -1.80442431e-01,
                                    -1.93786980e-01, -1.95411425e-01, -1.88075709e-01,
                                    -1.92215433e-01, 3.11508719e-01, 1.83870677e+00,
                                    1.37851319e-01, 3.72927814e+00],
                                   [1.08995892e-01, 8.87611495e-02, 1.13894586e-01,
                                    1.13390226e-01, 1.21734192e-01, 1.09379874e-01,
                                    1.01360967e-01, 1.21984722e-01, 1.15016994e-01,
                                    8.98892213e-02, -7.31023411e-01, 3.55412897e+00,
                                    3.53275607e+00, -1.84389948e+01],
                                   [-7.75403388e-01, -7.81323161e-01, -7.77402807e-01,
                                    -7.83468721e-01, -7.87408934e-01, -7.82591714e-01,
                                    -7.76946859e-01, -7.79088921e-01, -7.67113086e-01,
                                    -7.79008786e-01, 1.18999391e-01, 3.98589217e-01,
                                    -1.84015571e-01, 8.03630422e-01],
                                   [-7.81151078e-01, -7.74700094e-01, -7.58700524e-01,
                                    -7.72002693e-01, -7.60607971e-01, -7.85768949e-01,
                                    -7.89128124e-01, -7.72044415e-01, -7.88816057e-01,
                                    -7.48416297e-01, 9.51357093e-02, 3.17397685e-01,
                                    -1.97678418e-01, 6.82006240e-01],
                                   [-6.46846370e-01, -6.51585060e-01, -6.41687714e-01,
                                    -6.36323266e-01, -6.53219797e-01, -6.62738143e-01,
                                    -6.45379896e-01, -6.52651738e-01, -6.39558034e-01,
                                    -6.52527764e-01, -4.98248275e-02, -5.99453605e-02,
                                    1.19963352e-02, 7.71887895e-02],
                                   [-4.12863600e-01, -3.94701495e-01, -4.11622686e-01,
                                    -4.21315668e-01, -4.12922916e-01, -4.18858305e-01,
                                    -4.32807796e-01, -4.16900381e-01, -4.04515937e-01,
                                    -4.23157125e-01, -5.63164941e-01, -4.95260210e-01,
                                    -2.23806371e-01, -2.92891513e+00],
                                   [9.67212264e-02, 1.09557839e-01, 1.02744986e-01,
                                    9.36608886e-02, 8.44470196e-02, 8.79102358e-02,
                                    8.55005342e-02, 9.50175616e-02, 7.77028003e-02,
                                    1.01987924e-01, -1.89744344e-01, -5.77544539e-01,
                                    4.53037685e-02, -8.62670763e+00],
                                   [-7.89630824e-01, -7.87863634e-01, -7.73080807e-01,
                                    -7.86178020e-01, -7.67036780e-01, -7.85755029e-01,
                                    -7.76075356e-01, -7.88368394e-01, -7.69731144e-01,
                                    -7.83831754e-01, 1.02787838e-01, 3.72500890e-01,
                                    -2.04207140e-01, 7.92262237e-01]]), 'b1': np.array([[-2.53034523],
                                                                                        [-2.67069039],
                                                                                        [-2.74444091],
                                                                                        [-2.39874325],
                                                                                        [-3.07473695],
                                                                                        [-2.32383927],
                                                                                        [-2.41562789],
                                                                                        [-2.38532569],
                                                                                        [-2.29682817],
                                                                                        [-2.30538543],
                                                                                        [-3.25504297],
                                                                                        [-2.35371968],
                                                                                        [-3.08031919],
                                                                                        [-2.73257931],
                                                                                        [-2.62415737],
                                                                                        [-2.50235196],
                                                                                        [-1.24043323],
                                                                                        [-2.68146345],
                                                                                        [-2.57903619],
                                                                                        [-2.85491862],
                                                                                        [-4.06824293],
                                                                                        [-2.58276648],
                                                                                        [-2.7389298],
                                                                                        [-5.82691659],
                                                                                        [-2.68294261],
                                                                                        [-2.66451197],
                                                                                        [-2.42156014],
                                                                                        [-2.72956035],
                                                                                        [-4.29920414],
                                                                                        [-2.68677255]]),
                   'W2': np.array([[1.01339369, -0.62727462, -1.35044658, 0.06636111, 1.2640281,
                                    0.31813007, 0.01947514, 0.11490938, 0.61277397, 0.79797033,
                                    1.31581458, 0.20655638, 1.22878863, -1.630906, -1.05672701,
                                    -0.20236105, -2.20374518, -0.65833663, 1.07748326, 1.19286048,
                                    3.94863688, -0.39034615, -1.43275453, 4.3595764, -0.67106294,
                                    -0.60151661, 0.01283622, 1.1099762, 1.75504323, -0.6664395]]),
                   'b2': np.array([[0.56111348]])}

TargetCols = [
    'assetCodes',
    'urgency',
    'takeSequence',
    'marketCommentary',
    'relevance',
    'sentimentWordCount'
]

TargetColsMean = [
    'assetCodes_sum',
    'urgency_sum',
    'takeSequence_sum',
    'marketCommentary_sum',
    'relevance_sum',
    'sentimentWordCount_sum',
    'v_mean',
    'p_mean',
    'l_mean',
    'm_mean',
    'n_mean',
    's_mean',
    'k_mean'
]


def readMarketTrainData(market_train_df, news_train_df):
    standardNewsData, trueMakertRate, newsMarketDeta = readMarketNewsData(news_train_df, market_train_df)

    news_train_df_aggregated, tem, tem1 = readStockNewsData(news_train_df, market_train_df)
    del tem, tem1

    # Join with train
    market_train_df = market_train_df.join(news_train_df_aggregated, on=['time', 'assetCode'])

    # Free memory
    del news_train_df_aggregated

    marketDetaData = {}
    newsTimeList = list(set(news_train_df['time']))
    for temStockTime in newsTimeList:
        stockInfoList = market_train_df[market_train_df['time'] == temStockTime]
        marketDetaData[temStockTime] = caculateMarketRate(stockInfoList)

    nan_data = np.isnan(market_train_df['urgency_sum'])
    nan_index = []
    for nanIndex in range(0, len(nan_data)):
        if nan_data[nanIndex]:
            nan_index.append(nanIndex)
    target_market_train_df = market_train_df.drop(nan_index)

    del market_train_df

    marketDeta = []
    # for temIndex in range(0, len(target_market_train_df)):
    #     marketDeta.append(marketDetaData[target_market_train_df['time'].values[temIndex]])

    stockRate = (
        (target_market_train_df['close'] - target_market_train_df['open']) / target_market_train_df['open']).values

    targetValues = target_market_train_df[TargetColsMean]

    stockMarketData = targetValues.apply(
        lambda x: (x) / (abs(x) + 0.001) * (abs(x) - np.min(abs(x)) * 1.0) / (np.max(abs(x)) - np.min(abs(x)))).values
    stockMarketData[np.isnan(stockMarketData)] = 1.0

    # marketArrayDeta = []
    # for temDeta in marketDeta:
    #     marketArrayDeta.append([temDeta])
    # stockMarketData = np.concatenate((stockMarketData, marketArrayDeta), axis=1)

    return np.array(standardNewsData), np.array(trueMakertRate), np.array(newsMarketDeta), np.array(
            marketDeta), np.array(stockMarketData), np.array(stockRate),targetValues


def readMarketNewsData(news_train_df, market_train_df):
    market_train_df['time'] = market_train_df['time'].astype(str).str[0:10]
    news_train_df['assetCodes'] = news_train_df['assetCodes'].str.findall("'([\w\./]+)'")
    news_train_df['time'] = news_train_df['time'].astype(str).str[0:10]
    news_train_df['marketCommentary'] = news_train_df['marketCommentary'].astype('int')

    newsTimeList = list(set(news_train_df['time']))
    newsTimeList.sort()
    trueMakertRate = []
    standardNewsData = []
    makertRateDeta = []
    for index in range(0, len(newsTimeList)):
        temMarketTime = newsTimeList[index]
        stockMarketTime = (pd.to_datetime(temMarketTime) + datetime.timedelta(days=1)).strftime('%Y-%m-%d')
        if market_train_df is not None:
            stockInfoList = market_train_df[market_train_df['time'] == temMarketTime]
            if len(stockInfoList) == 0:
                stockInfoList = market_train_df[market_train_df['time'] == stockMarketTime]
            if len(stockInfoList) == 0:
                continue
            trueMakertRate.append(caculateMarketRate(stockInfoList))
        temDeta = 0
        for detaIndex in range(index - 3, index + 1):
            if detaIndex < 0:
                continue
            stockInfoList = market_train_df[market_train_df['time'] == newsTimeList[detaIndex]]
            temDeta += caculateMarketRate(stockInfoList) / (index + 1 - detaIndex)
        makertRateDeta.append(temDeta)

        oneNewsData = news_train_df[news_train_df['time'] == temMarketTime]
        sentiments = ((oneNewsData['sentimentPositive'] + oneNewsData['sentimentNeutral'] / 2 - 0.5) * 2).values
        targetValues = oneNewsData[TargetCols]
        targetValues['assetCodes'] = targetValues['assetCodes'].str.len()
        standardValues = targetValues.apply(
            lambda x: (x) / (abs(x) + 0.001) * (abs(x) - np.min(abs(x)) * 1.0) / (np.max(abs(x)) - np.min(abs(x)))).values
        standardValues[np.isnan(standardValues)] = 1.0
        # for rowIndex in range(0, len(standardValues)):
        #     standardValues[rowIndex] = standardValues[rowIndex] * sentiments[rowIndex]
        del targetValues
        standardNewsData.append(standardValues)
        del standardValues
    return standardNewsData, trueMakertRate, makertRateDeta


def readStockNewsData(news_train_df, market_train_df):
    news_cols_agg = {
        'urgency': ['sum'],
        'takeSequence': ['sum'],
        'marketCommentary': ['sum'],
        'relevance': ['sum'],
        'sentimentWordCount': ['sum'],
        'sentimentPositive': ['sum'],
        'sentimentNeutral': ['sum']
    }
    assetCodes_index = news_train_df.index.repeat(news_train_df['assetCodes'].apply(len))
    assetCodes_expanded = list(chain(*news_train_df['assetCodes']))
    df_assetCodes = pd.DataFrame({'level_0': assetCodes_index, 'assetCode': assetCodes_expanded})

    # Create expandaded news (will repeat every assetCodes' row)
    news_cols = ['time', 'assetCodes'] + sorted(news_cols_agg.keys())
    news_train_df_expanded = pd.merge(df_assetCodes, news_train_df[news_cols], left_on='level_0', right_index=True,
                                      suffixes=(['', '_old']))
    news_cols_agg['assetCodes'] = ['mean']
    news_train_df_expanded['assetCodes'] = news_train_df_expanded['assetCodes'].str.len()

    news_train_df_expanded = pd.concat([news_train_df_expanded, pd.DataFrame(columns=list('vplmnsk'), dtype=float)])

    market_tem_data = market_train_df[['time', 'assetCode', 'open', 'close', 'volume']]
    pre_market_news_expanded = pd.merge(market_tem_data, news_train_df_expanded, on=['time', 'assetCode'])

    pre_market_news_expanded['v'] = pre_market_news_expanded['volume'] * pre_market_news_expanded['close']
    pre_market_news_expanded['l'] = (pre_market_news_expanded['close'] - pre_market_news_expanded['open']) / \
                                    pre_market_news_expanded['open']
    pre_market_news_expanded['p'] = pre_market_news_expanded['close']
    pre_market_news_expanded['s'] = pre_market_news_expanded.apply(
                lambda x: (x['sentimentPositive'] + x['sentimentNeutral'] / 2 - 0.5) * 2, axis=1)
    print(pre_market_news_expanded['l'])
    nan_data = np.isnan(pre_market_news_expanded['v'])
    nan_index = []
    for nanIndex in range(0, len(nan_data)):
        if nan_data[nanIndex]:
            nan_index.append(nanIndex)
    pre_market_news_expanded = pre_market_news_expanded.drop(nan_index)

    newsTimeList = list(set(news_train_df_expanded['time']))
    newsTimeList.sort()
    marketDetaData = {}
    for temStockTime in newsTimeList:
        stockInfoList = news_train_df_expanded[news_train_df_expanded['time'] == temStockTime]
        marketDetaData[temStockTime] = caculateNewsRate(stockInfoList)

    for index, temRow in pre_market_news_expanded.iterrows():
        temTime = temRow['time']
        code = temRow['assetCode']
        pre_market_news_expanded.loc[index, ['k']] = marketDetaData[temTime]
        newsMarketTime = pd.to_datetime(temTime)
        temMarketTime = (pd.to_datetime(newsMarketTime) - datetime.timedelta(days=abs(1))).strftime('%Y-%m-%d')
        target_market_train = market_train_df[market_train_df['time'] == temMarketTime]
        stockInfoList = target_market_train[target_market_train['assetCode'] == code]
        if len(stockInfoList) == 0:
            pre_market_news_expanded.loc[index, ['m']] = 0
        else:
            targetRow = stockInfoList.iloc[[0]]
            pre_market_news_expanded.loc[index, ['m']] = (targetRow['close'].values[0] - targetRow['open'].values[0]) / targetRow['open'].values[0]

        temMarketTime = (pd.to_datetime(newsMarketTime) - datetime.timedelta(days=abs(2))).strftime('%Y-%m-%d')
        target_market_train = market_train_df[market_train_df['time'] == temMarketTime]
        stockInfoList = target_market_train[target_market_train['assetCode'] == code]
        if len(stockInfoList) == 0:
            pre_market_news_expanded.loc[index, ['n']] = 0
        else:
            targetRow = stockInfoList.iloc[[0]]
            pre_market_news_expanded.loc[index, ['n']] = (targetRow['close'].values[0] - targetRow['open'].values[0]) / targetRow['open'].values[0]

    # for temCol in TargetCols:
    #     pre_market_news_expanded[temCol] *= pre_market_news_expanded['s']

    pre_market_news_expanded['time'] = pd.to_datetime(pre_market_news_expanded['time']) + datetime.timedelta(days=1)
    pre_market_news_expanded['time'] = pre_market_news_expanded['time'].apply(lambda x: x.strftime('%Y-%m-%d'))

    # Free memory
    del news_train_df, df_assetCodes

    news_cols_agg['v'] = ['mean']
    news_cols_agg['p'] = ['mean']
    news_cols_agg['l'] = ['mean']
    news_cols_agg['m'] = ['mean']
    news_cols_agg['n'] = ['mean']
    news_cols_agg['s'] = ['mean']
    news_cols_agg['k'] = ['mean']
    news_cols_agg['assetCodes'] = ['sum']
    news_cols_agg.pop('sentimentPositive')
    news_cols_agg.pop('sentimentNeutral')

    grouInfo = pre_market_news_expanded.groupby(['time', 'assetCode'])
    stockCodes = []
    for key in grouInfo.groups.keys():
        stockCodes.append(key[1])
    news_train_df_aggregated = grouInfo.agg(news_cols_agg)
    del news_train_df_expanded

    news_train_df_aggregated = news_train_df_aggregated.apply(np.float32)
    news_train_df_aggregated.columns = ['_'.join(col).strip() for col in news_train_df_aggregated.columns.values]

    news_train_df_export = news_train_df_aggregated[TargetColsMean]
    stockMarketData = news_train_df_export.apply(
        lambda x: (x) / (abs(x) + 0.0001) * (x - np.min(x) * 1.0) / (np.max(x) - np.min(x))).values
    stockMarketData[np.isnan(stockMarketData)] = 1.0

    return news_train_df_aggregated, stockMarketData, stockCodes


def caculateMarketRate(stockInfoList):
    if len(stockInfoList) == 0:
        return 0
    rate = sum(((stockInfoList['open'] - stockInfoList['close']) / stockInfoList['open']).values) / len(stockInfoList)
    return rate


def caculateNewsRate(oneNewsData):
    if len(oneNewsData) == 0:
        return 0
    rate = sum(((oneNewsData['sentimentPositive'] + oneNewsData['sentimentNeutral'] / 2 - 0.5) * 2).values)
    return rate / np.sqrt(len(oneNewsData))


def layer_sizes(X, Y):
    n_x = X.shape[0]  # size of input layer
    n_y = Y.shape[0]  # size of output layer

    return (n_x, n_y)


def initialize_parameters(n_h, n_y, n_z, n_k):
    np.random.seed(2)

    W0 = []
    for i in range(0, n_k):
        W0.append(np.random.randn(1, n_z))
    W0 = np.array(W0)
    b0 = np.zeros((n_k, 1))
    W1 = np.random.randn(n_h, n_k) * 0.01
    b1 = np.zeros((n_h, 1))
    W2 = np.random.randn(n_y, n_h) * 0.01
    b2 = np.zeros((n_y, 1))

    parameters = {"W0": W0,
                  "b0": b0,
                  "W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2}

    return parameters


def sigmoid(x):
    s = 1 / (1 + np.exp(-x))
    return s


# 令输出
def forward_propagation(X, deta, parameters):
    # Retrieve each parameter from the dictionary "parameters"
    W0 = parameters["W0"]
    b0 = parameters["b0"]
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]

    inputX = []
    for kIndex in range(0, len(W0)):
        temValue = []
        for index in range(0, len(X)):
            oneX = X[index]
            oneY = np.dot(oneX, W0[kIndex].T) + sum(deta * b0[kIndex])
            value = sum(oneY)
            if len(np.shape(value)) == 0:
                temValue.append(value)
            else:
                temValue.append(value[0])
        inputX.append(temValue)

    inputX = np.array(inputX)
    # Implement Forward Propagation to calculate A2 (probabilities)
    Z1 = np.dot(W1, inputX) + b1
    A1 = sigmoid(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = np.tanh(Z2)

    assert (A2.shape == (1, inputX.shape[1]))

    cache = {"X0": inputX,
             "Z1": Z1,
             "A1": A1,
             "Z2": Z2,
             "A2": A2}

    return A2, cache


def compute_cost(A2, Y, parameters):
    m = Y.shape[0]  # number of example

    # Compute the cross-entropy cost
    logprobs = np.multiply(np.log(A2), Y) + np.multiply(np.log(1 - A2), 1 - Y)
    cost = - np.sum(logprobs) / m

    cost = np.squeeze(cost)  # makes sure cost is the dimension we expect.
    # E.g., turns [[17]] into 17
    assert (isinstance(cost, float))

    return cost


def backward_propagation(parameters, cache, deta, X, Y):
    m = X.shape[0]
    count = 0
    if len(np.shape(X)) != 2:
        for xIndex in range(0, len(X)):
            count += len(X[xIndex])
        m = count
    # First, retrieve W1 and W2 from the dictionary "parameters".
    W0 = parameters["W0"]
    W1 = parameters["W1"]
    W2 = parameters["W2"]

    # Retrieve also A1 and A2 from dictionary "cache".
    A1 = cache["A1"]
    A2 = cache["A2"]
    X0 = cache["X0"]
    # Backward propagation: calculate dW1, db1, dW2, db2.
    dZ2 = A2 - Y
    dGj = dZ2 * (1 - np.power(A2, 2))
    dW2 = np.dot(dGj, A1.T) / m
    db2 = np.sum(dGj, axis=1, keepdims=True) / m

    dZ1 = np.dot(W2.T, dGj) * A1 * (1 - A1)
    dW1 = np.dot(dZ1, X0.T) / m
    db1 = np.sum(dZ1, axis=1, keepdims=True) / m

    dZ0 = np.dot(W1.T, dZ1)
    dW0 = []
    dB0 = []
    if len(np.shape(X)) == 2:
        for index in range(0, len(dZ0)):
            temDW0 = []
            for k in range(0, len(X[0])):
                temDDW3 = 0
                for j in range(0, len(X)):
                    temSample = X[j][k]
                    temDDW3 += temSample * dZ0[index][j]
                temDW0.append(temDDW3 / m)
            temDB3 = sum(dZ0[index] / m)
            dW0.append(np.array([temDW0]))
            if (len(deta) == 0):
                dB0.append(np.array([0]))
            else:
                dB0.append(np.array([temDB3]))
    else:
        for index in range(0, len(dZ0)):
            temDW0 = []
            for k in range(0, len(X[0][0])):
                temDDW3 = 0
                for j in range(0, len(X)):
                    temSample = sum(X[j][:, k])
                    temDDW3 += temSample * dZ0[index][j]
                temDW0.append(temDDW3 / count)
            temDB3 = sum(dZ0[index] / count)
            dW0.append(np.array([temDW0]))
            if (len(deta) == 0):
                dB0.append(np.array([0]))
            else:
                dB0.append(np.array([temDB3]))

    grads = {"dW0": np.array(dW0),
             "db0": np.array(dB0),
             "dW1": dW1,
             "db1": db1,
             "dW2": dW2,
             "db2": db2}

    return grads


def update_parameters(parameters, grads, learning_rate=1.2):
    # Retrieve each parameter from the dictionary "parameters"
    W0 = parameters["W0"]
    b0 = parameters["b0"]
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]

    # Retrieve each gradient from the dictionary "grads"
    dW0 = grads["dW0"]
    db0 = grads["db0"]
    dW1 = grads["dW1"]
    db1 = grads["db1"]
    dW2 = grads["dW2"]
    db2 = grads["db2"]

    # Update rule for each parameter
    W0 -= learning_rate * dW0
    b0 -= learning_rate * db0
    W1 -= learning_rate * dW1
    b1 -= learning_rate * db1
    W2 -= learning_rate * dW2
    b2 -= learning_rate * db2

    parameters = {
        "W0": W0,
        "b0": b0,
        "W1": W1,
        "b1": b1,
        "W2": W2,
        "b2": b2}

    return parameters


def nn_model(X, Y, n_output, n_h, n_z, n_k, deta, num_iterations=10000, print_cost=False):
    np.random.seed(3)
    parameters = initialize_parameters(n_h, n_output, n_z, n_k)
    W0 = parameters["W0"]
    b0 = parameters["b0"]
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]

    for i in range(0, num_iterations):
        A2, cache = forward_propagation(X, deta, parameters)

        grads = backward_propagation(parameters, cache, deta, X, Y)

        parameters = update_parameters(parameters, grads)

        # Print the cost every 100 iterations
        if print_cost and i % 100 == 0:
            print ("Cost after iteration %i" % (i))
            #     cost = compute_cost(A2, Y, parameters)
            #     print ("Cost after iteration %i: %f" % (i, cost))

    return parameters


def predict(parameters, X, deta):
    A2, cache = forward_propagation(X, deta, parameters)
    predictions = (A2 > 0.5)

    return A2, cache


def dealForwardMakert(parameters, cache, sentiment, result, ):
    A2 = cache["A2"]
    A3 = A2 / sum(A2)
    negative = sum(A3 * sentiment[0]) / len(A3)
    positive = sum(A3 * sentiment[1]) / len(A3)
    dA3 = 0
    if result > 0:
        dA3 = abs(result) - positive
    else:
        dA3 = abs(negative) - positive
    cache["A3"] = A3
    cache["DA3"] = dA3


def nn_model_stock(X, Y, n_h, num_iterations=10000, print_cost=False):
    np.random.seed(3)
    n_x = layer_sizes(X, Y)[0]
    n_y = 1
    parameters = initialize_parameters_stock(n_x, n_h, n_y)
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]
    onSubCount = num_iterations / 5
    for i in range(0, num_iterations):
        A2, cache = forward_propagation_stock(X, parameters)

        grads = backward_propagation_stock(parameters, cache, X, Y)

        parameters = update_parameters_stock(parameters, grads)

        # Print the cost every 1000 iterations
        if print_cost and i % onSubCount == 0:
            # cost = compute_cost(A2, Y, parameters)
            print ("Cost after iteration %i" % (i))
            predictStockRate = predict_stock(parameters, X)
            checkParamters(parameters, Y, predictStockRate)

    return parameters


def initialize_parameters_stock(n_x, n_h, n_y):
    np.random.seed(2)

    W1 = np.random.randn(n_h, n_x) * 0.01
    b1 = np.zeros((n_h, 1))
    W2 = np.random.randn(n_y, n_h) * 0.01
    b2 = np.zeros((n_y, 1))

    assert (W1.shape == (n_h, n_x))
    assert (b1.shape == (n_h, 1))
    assert (W2.shape == (n_y, n_h))
    assert (b2.shape == (n_y, 1))

    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2}

    return parameters


def update_parameters_stock(parameters, grads, learning_rate=1.2):
    # Retrieve each parameter from the dictionary "parameters"
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]

    # Retrieve each gradient from the dictionary "grads"
    dW1 = grads["dW1"]
    db1 = grads["db1"]
    dW2 = grads["dW2"]
    db2 = grads["db2"]

    # Update rule for each parameter
    W1 -= learning_rate * dW1
    b1 -= learning_rate * db1
    W2 -= learning_rate * dW2
    b2 -= learning_rate * db2

    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2}

    return parameters


def backward_propagation_stock(parameters, cache, X, Y):
    m = X.shape[1]
    # First, retrieve W1 and W2 from the dictionary "parameters".
    W1 = parameters["W1"]
    W2 = parameters["W2"]

    # Retrieve also A1 and A2 from dictionary "cache".
    A1 = cache["A1"]
    A2 = cache["A2"]

    # Backward propagation: calculate dW1, db1, dW2, db2.
    # 符号相反，增加惩罚力度
    dZ2 = (A2 - Y)
    orient = ((A2 * Y) < 0)[0]
    # dZ2[0][orient]*=2
    # for orientIndex in range(0,len(orient)):
    #     if orient[orientIndex]:
    #         dZ2[0][orientIndex]*=2
    #         if dZ2[0][orientIndex]<0:
    #             dZ2[0][orientIndex] -=1
    #         else:
    #             dZ2[0][orientIndex] +=1
    dGj = dZ2 * (1 - np.power(A2, 2))
    dW2 = np.dot(dGj, A1.T) / m
    db2 = np.sum(dGj, axis=1, keepdims=True) / m
    dZ1 = np.dot(W2.T, dGj) * A1 * (1 - A1)
    dW1 = np.dot(dZ1, X.T) / m
    db1 = np.sum(dZ1, axis=1, keepdims=True) / m

    grads = {"dW1": dW1,
             "db1": db1,
             "dW2": dW2,
             "db2": db2}

    return grads


def forward_propagation_stock(X, parameters):
    # Retrieve each parameter from the dictionary "parameters"
    W1 = parameters["W1"]
    b1 = parameters["b1"]
    W2 = parameters["W2"]
    b2 = parameters["b2"]

    # Implement Forward Propagation to calculate A2 (probabilities)
    Z1 = np.dot(W1, X) + b1
    A1 = sigmoid(Z1)
    Z2 = (np.dot(W2, A1) + b2)
    A2 = np.tanh(Z2)

    assert (A2.shape == (1, X.shape[1]))

    cache = {"Z1": Z1,
             "A1": A1,
             "Z2": Z2,
             "A2": A2}

    return A2, cache


def predict_stock(parameters, X):
    A2, cache = forward_propagation_stock(X, parameters)

    return A2


def readPredictMarketNewsData(news_train_df, market_train_df, time):
    market_train_df['time'] = market_train_df['time'].astype(str).str[0:10]
    news_train_df['assetCodes'] = news_train_df['assetCodes'].str.findall("'([\w\./]+)'")
    news_train_df['time'] = news_train_df['time'].astype(str).str[0:10]
    news_train_df['marketCommentary'] = news_train_df['marketCommentary'].astype('int')

    newsTimeList = list(set(news_train_df['time']))
    newsTimeList.sort()
    standardNewsData = []  # 三维数组
    makertRateDeta = []  # 之前的市场涨跌信息作为deta
    # 选取最近一天
    newsMarketTime = pd.to_datetime(time)
    targetNewsMarketTime = pd.to_datetime("2000-01-01")
    for timeStr in newsTimeList:
        temTime = pd.to_datetime(timeStr)
        if temTime <= newsMarketTime and temTime > targetNewsMarketTime:
            targetNewsMarketTime = temTime
    targetNewsMarketTime = targetNewsMarketTime.strftime('%Y-%m-%d')
    # 获取前三天的市场信息
    temDeta = 0
    for detaIndex in range(-3, 1):
        if detaIndex >= 1:
            continue
        temMarketTime = (pd.to_datetime(newsMarketTime) - datetime.timedelta(days=abs(detaIndex))).strftime('%Y-%m-%d')
        stockInfoList = market_train_df[market_train_df['time'] == temMarketTime]
        temDeta += caculateMarketRate(stockInfoList) / (1 - detaIndex)
    makertRateDeta.append(temDeta)

    # 归一化数据,得到输入 X
    oneNewsData = news_train_df[news_train_df['time'] == targetNewsMarketTime]
    sentiments = ((oneNewsData['sentimentPositive'] + oneNewsData['sentimentNeutral'] / 2 - 0.5) * 2).values
    targetValues = oneNewsData[TargetCols]
    targetValues['assetCodes'] = targetValues['assetCodes'].str.len()
    standardValues = targetValues.apply(
        lambda x: (x) / (abs(x) + 0.001) * (x - np.min(abs(x)) * 1.0) / (np.max(abs(x)) - np.min(abs(x)))).values
    standardValues[np.isnan(standardValues)] = 1.0
    # for rowIndex in range(0, len(standardValues)):
    #     standardValues[rowIndex] = standardValues[rowIndex] * sentiments[rowIndex]
    del targetValues
    standardNewsData.append(standardValues)
    del standardValues
    return standardNewsData, makertRateDeta


def readPredictStockNewsData(news_train_df, market_train_df,trainValues):
    news_cols_agg = {
        'urgency': ['sum'],
        'takeSequence': ['sum'],
        'marketCommentary': ['sum'],
        'relevance': ['sum'],
        'sentimentWordCount': ['sum'],
        'sentimentPositive': ['sum'],
        'sentimentNeutral': ['sum']
    }
    assetCodes_index = news_train_df.index.repeat(news_train_df['assetCodes'].apply(len))
    assetCodes_expanded = list(chain(*news_train_df['assetCodes']))
    df_assetCodes = pd.DataFrame({'level_0': assetCodes_index, 'assetCode': assetCodes_expanded})

    # Create expandaded news (will repeat every assetCodes' row)
    news_cols = ['time', 'assetCodes'] + sorted(news_cols_agg.keys())
    news_train_df_expanded = pd.merge(df_assetCodes, news_train_df[news_cols], left_on='level_0', right_index=True,
                                      suffixes=(['', '_old']))
    # 换成股票个数
    news_train_df_expanded['assetCodes'] = news_train_df_expanded['assetCodes'].str.len()

    # vpl => 市值\股价\最近一天
    news_train_df_expanded = pd.concat([news_train_df_expanded, pd.DataFrame(columns=list('vplmnsk'), dtype=float)])

    # 市值\价格和当天涨跌
    market_tem_data = market_train_df[['time', 'assetCode', 'open', 'close', 'volume']]
    pre_market_news_expanded = pd.merge(market_tem_data, news_train_df_expanded, on=['time', 'assetCode'])

    pre_market_news_expanded['v'] = pre_market_news_expanded['volume'] * pre_market_news_expanded['close']
    pre_market_news_expanded['l'] = (pre_market_news_expanded['close'] - pre_market_news_expanded['open']) / \
                                    pre_market_news_expanded['open']
    pre_market_news_expanded['p'] = pre_market_news_expanded['close']
    pre_market_news_expanded['s'] = pre_market_news_expanded.apply(
                lambda x: (x['sentimentPositive'] + x['sentimentNeutral'] / 2 - 0.5) * 2, axis=1)
    # 清洗数据,去掉 'v' == NAN
    nan_data = np.isnan(pre_market_news_expanded['v'])
    nan_index = []
    for nanIndex in range(0, len(nan_data)):
        if nan_data[nanIndex]:
            volumeMarketData = market_tem_data[
                market_tem_data['assetCode'] == pre_market_news_expanded['assetCode'].values[nanIndex]]
            if (len(volumeMarketData) > 0):
                pre_market_news_expanded['v'] = volumeMarketData['volume'].values[0]
                pre_market_news_expanded['l'] = 0
                pre_market_news_expanded['p'] = volumeMarketData['close'].values[0]
            else:
                nan_index.append(nanIndex)
    pre_market_news_expanded = pre_market_news_expanded.drop(nan_index)


    newsTimeList = list(set(news_train_df_expanded['time']))
    newsTimeList.sort()
    marketDetaData = {}
    for temStockTime in newsTimeList:
        stockInfoList = news_train_df_expanded[news_train_df_expanded['time'] == temStockTime]
        marketDetaData[temStockTime] = caculateNewsRate(stockInfoList)

    for index, temRow in pre_market_news_expanded.iterrows():
        temTime = temRow['time']
        code = temRow['assetCode']
        pre_market_news_expanded.loc[index, ['k']] = marketDetaData[temTime]
        newsMarketTime = pd.to_datetime(temTime)
        temMarketTime = (pd.to_datetime(newsMarketTime) - datetime.timedelta(days=abs(1))).strftime('%Y-%m-%d')
        target_market_train = market_train_df[market_train_df['time'] == temMarketTime]
        stockInfoList = target_market_train[target_market_train['assetCode'] == code]
        if len(stockInfoList) == 0:
            pre_market_news_expanded.loc[index, ['m']] = 0
        else:
            targetRow = stockInfoList.iloc[[0]]
            pre_market_news_expanded.loc[index, ['m']] = (targetRow['close'].values[0] - targetRow['open'].values[0]) / targetRow['open'].values[0]

        temMarketTime = (pd.to_datetime(newsMarketTime) - datetime.timedelta(days=abs(2))).strftime('%Y-%m-%d')
        target_market_train = market_train_df[market_train_df['time'] == temMarketTime]
        stockInfoList = target_market_train[target_market_train['assetCode'] == code]
        if len(stockInfoList) == 0:
            pre_market_news_expanded.loc[index, ['n']] = 0
        else:
            targetRow = stockInfoList.iloc[[0]]
            pre_market_news_expanded.loc[index, ['n']] = (targetRow['close'].values[0] - targetRow['open'].values[0]) / targetRow['open'].values[0]

    # 将舆情值乘以对应数据
    # for temCol in TargetCols:
    #     pre_market_news_expanded[temCol] *= pre_market_news_expanded.apply(
    #             lambda x: (x['sentimentPositive'] + x['sentimentNeutral'] / 2 - 0.5) * 2, axis=1)
    # Free memory
    del news_train_df, df_assetCodes

    news_cols_agg['v'] = ['mean']
    news_cols_agg['p'] = ['mean']
    news_cols_agg['l'] = ['mean']
    news_cols_agg['m'] = ['mean']
    news_cols_agg['n'] = ['mean']
    news_cols_agg['s'] = ['mean']
    news_cols_agg['k'] = ['mean']
    news_cols_agg['assetCodes'] = ['sum']
    news_cols_agg.pop('sentimentPositive')
    news_cols_agg.pop('sentimentNeutral')

    grouInfo = pre_market_news_expanded.groupby(['time', 'assetCode'])
    stockCodes = []
    for key in grouInfo.groups.keys():
        stockCodes.append(key[1])
    news_train_df_aggregated = grouInfo.agg(news_cols_agg)

    del news_train_df_expanded

    news_train_df_aggregated = news_train_df_aggregated.apply(np.float32)
    news_train_df_aggregated.columns = ['_'.join(col).strip() for col in news_train_df_aggregated.columns.values]

    news_train_df_export = news_train_df_aggregated[TargetColsMean]
    stockMarketData = news_train_df_export.apply(
        lambda x: (x) / (abs(x) + 0.001) * (x - np.min(trainValues[x.name].values) * 1.0) / (np.max(trainValues[x.name].values) - np.min(trainValues[x.name].values))).values
    stockMarketData[np.isnan(stockMarketData)] = 1.0
    stockMarketData[np.isinf(stockMarketData)] = 1.0

    return stockMarketData, stockCodes


def lastIndexOf(result, code):
    for index in range(len(result) - 1, -1, -1):
        if result[index] == code:
            return index
    return -1


def checkParamters(paramster, stockRate, predictStockRate):
    sumValue = stockRate * predictStockRate[0]
    # print(sumValue)
    predictions = sumValue >= 0
    count = 0
    for result in predictions:
        if result:
            count += 1
    print(stockRate)
    print(predictStockRate)
    # print(paramster)
    print(count * 1.0 / len(stockRate))



market_train_df = pd.read_csv("marketdata_sample.csv")
news_train_df = pd.read_csv("news_sample.csv")
slice_news = news_train_df[np.round(10).astype(int): news_train_df.shape[0]]
print ("slice begin", time.time())
for index in range(0, slice_news.shape[0]):
    slice_news.index._data[index] = index
slice_market = market_train_df[np.round(10).astype(int): market_train_df.shape[0]]
for index in range(0, slice_market.shape[0]):
    slice_market.index._data[index] = index
print ("read begin", time.time())
marketX, marketY, newsMarketDeta, marketDeta, stockMarketData, stockRate, trainValues = readMarketTrainData(slice_market, slice_news)
print ("read done", time.time())

for col in trainValues.columns.values:
    print(col,min(trainValues[col].values),max(trainValues[col].values))

# 使用单隐藏层神经网络计算市场舆情多空参数

# marketParameters = nn_model(marketX, marketY, 1, n_h=20, n_z=10, deta=newsMarketDeta, n_k=18,
#                             num_iterations=500, print_cost=True)

# print marketY
# print predict(marketParameters, marketX, newsMarketDeta)

print ("market done", time.time())

# print(marketParameters)

# 使用单隐藏层神经网络计算市场舆情多空参数计算个股 todo 需要关联市场数据
# deta=marketDeta, n_k=20,
stockMarketData = stockMarketData.T
stockParameters = nn_model_stock(stockMarketData, stockRate, n_h=30, num_iterations=500,
                                 print_cost=True)

print ("stock done", time.time())

# stockParameters = getStockParamters()
print stockRate
print predict_stock(stockParameters, stockMarketData)

# 开始预测
print ("开始预测------------")

market_train_df2 = pd.read_csv("marketdata_sample.csv")
news_train_df2 = pd.read_csv("news_sample.csv")

predictMarketNewsData, predictNewsMarketDeta = readPredictMarketNewsData(news_train_df2, market_train_df2, "2007-01-02")
predictStockNewsData, stockCodes = readPredictStockNewsData(news_train_df2, market_train_df2,trainValues)
# marketDeta = predict(marketParameters, predictMarketNewsData, predictNewsMarketDeta)
# arrayMarketDeta = []
# for stockIntex in range(0, len(predictStockNewsData)):
#     arrayMarketDeta.append([marketDeta[0][0]])
# print("marketDeta:", marketDeta)
# predictStockNewsData = np.concatenate((predictStockNewsData, np.array(arrayMarketDeta)), axis=1)
predictStockNewsData = predictStockNewsData.T
result = predict_stock(stockParameters, predictStockNewsData)[0]
print(result)
if stockCodes.__contains__('A.N'):
    print result[lastIndexOf(stockCodes, 'A.N')]

print ("完成预测------------")
